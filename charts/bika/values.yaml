global:
  # base64 encode api-key
  pmmApiKey: ''
  # elasticsearch subchart 
  kibanaEnabled: false

namespace: default

# -- 应用程序版本号，更新这里，就会触发部署
version: latest

# -- 镜像秘钥，需要再外部创建好放这里，参考：https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: ['regcred-ghcr']

web:
  cpu: '2'
  selfPostgres: true
  selfMongo: true
  # -- 自动形成ConfigMap的env，适合.env文件
  envFile:
    API_SERVER_BASE_URL: https://dev.bika.ai
    CLICKHOUSE_URL: clickhouse://bika:Bika2024@dev-proxy.vikadata.com:18123/bikadev
    EDGE_TOKEN: FRCbZ7abmHWXuo6h9VKhz9wXuVjgx7TTSWxpVJGzyVks0ExI2tpoQuz0qWRMrvRw
    EMAIL_TYPE: smtp
    EXPO_ACCESS_TOKEN: MNkUz-Cd9DJgWiDXEodJN1XQANzaSrg4lPwR9I5q
    FIREBASE_API_KEY: AIzaSyByCyP8rH6uydZkuWtHWEGEWbhhgLGYkqg
    FIREBASE_APP_ID: 1:896517107811:web:ab89cc7a5c6dddbbcac856
    FIREBASE_AUTH_DOMAIN: bika-project.firebaseapp.com
    FIREBASE_CLIENT_EMAIL: firebase-adminsdk-rhdsw@bika-project.iam.gserviceaccount.com
    FIREBASE_MESSAGING_SENDER_ID: '896517107811'
    FIREBASE_PRIVATE_KEY: 
    FIREBASE_PRIVATE_KEY_BACKUP: 
    FIREBASE_PROJECT_ID: 
    FIREBASE_PUBLIC_VAPID_KEY: 
    FIREBASE_STORAGE_BUCKET: 
    GITHUB_CLIENT_ID: 
    GITHUB_CLIENT_SECRET: 
    GOOGLE_CLIENT_ID: 
    GOOGLE_CLIENT_SECRET: 
    REDIS_URL: redis://default:@redis-master:6379
    MINIO_URL: r2://bika:bikabika@bika-minio/bika?useSSL=true
    NEXT_PUBLIC_API_URL: /api
    NEXT_PUBLIC_HOSTNAME: https://dev.bika.ai
    NEXT_PUBLIC_MINIO_HOST: https://s1-dev.bika.ai
    NEXT_PUBLIC_POSTHOG_HOST: https://eu.posthog.com
    NEXT_PUBLIC_POSTHOG_KEY: phc_t8QSxDCl5Z9qSavno6UKpstTB1LtMsHXrDLTJo0vesB
    OPENAI_API_KEY: 
    OPENAI_BASE_URL: https://openai.bika.ltd/v1
    SENTRY_DSN: https://16540402c09c4e6196d6fbedd97421d8@sentry.vika.ltd/16
    SMS_TYPE: smtp
    SMTP_HOST: 
    SMTP_PASSWORD: 
    SMTP_USERNAME: 
    STRIPE_PUBLIC_KEY: 
    STRIPE_SECRET_KEY: 
    STRIPE_WEBHOOK_SECRET: 
    WATERMARK_HOST: bikaai.cn
    NODE_OPTIONS: "--max_old_space_size=4096"
    DOC_SERVER: ws://bika-server-doc:3366

  # 扩充users
  users:
  # -- envFrom:
  extraEnvFrom: 
  # -- 扩充env，container env字段，适合取其它secrets形成envs
  extraEnvs:
    # -- 从bika-pg-pguser-bika-pg secrets里取
    # - name: PG_DATABASE_URL
    #   valueFrom:
    #     secretKeyRef:
    #       key: pgbouncer-uri
    #       name: bika-pg-pguser-bika
    # - name: PG_DATABASE_HOST
    #   valueFrom:
    #     secretKeyRef:
    #       key: pgbouncer-host
    #       name: bika-pg-pguser-bika
    # - name: PG_DATABASE_USER
    #   valueFrom:
    #     secretKeyRef:
    #       key: user
    #       name: bika-pg-pguser-bika
    # - name: PG_DATABASE_PASSWORD
    #   valueFrom:
    #     secretKeyRef:
    #       key: password
    #       name: bika-pg-pguser-bika
    # # -- 从secrets里组合postgres连接
    # - name: PG_DATABASE_URL
    #   value: postgresql://$(PG_DATABASE_USER):$(PG_DATABASE_PASSWORD)@bika-pg-pgbouncer:5432/bika

# cron jobs容器属性参数
cron:
  enabled: true

# 推荐
# 集成环境: pg 1 replicas, mongo 3 replicas， sharding: false + Longhorn + 备份
# staging环境：pg 2 replicas, mongo 3 replicas, sharding: true，双/三节点存储 + wasabi 备份
# 生产环境： pg 3 replicas，mongo 3 replicas sharding: true，分布式节点 + 推Glacier备份 + 不推TrueNAS S3(无出网)


# 缓存redis
redis:
  enabled: true
  storage: 3Gi
  storageClass: longhorn
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #         - matchExpressions:
  #             - key: dedicated
  #               operator: In
  #               values:
  #                 - datacenter
  # tolerations:
  # - effect: NoSchedule
  #   key: role
  #   operator: Equal
  #   value: connection-poolers

postgres:
  enabled: true
  ui: true
  replicas: 1
  # 多少个连接池bouncer
  bouncerReplicas: 3
  memory: "0.5G" # 4G
  cpu: "300m" # 2
  storage: 3Gi
  storageClass: longhorn
  backup:
    enabled: false
  pmm:
    enabled: false
    serverHost: monitoring-service

mongo:
  enabled: true
  # -- 是否启动mongo-express，mongo的ui dashboard
  ui: true
  replicas: 3 # mongodb至少为3
  memory: "0.5G" # 4G
  cpu: "300m" # 2
  storage: 3Gi
  storageClass: longhorn
  sharding:
    enabled: false
    mongos:
      cpu: '2'
      memory: '4G'
  backup:
    enabled: false
  pmm:
    enabled: false
    serverHost: monitoring-service
  # advancedAffinity:
  # tolerations:
  # - effect: "NoSchedule"
  #   key: "dedicated"
  #   operator: "Equal"
  #   value: "datacenter"

    # storages:
#      minio:
#        type: s3
#        s3:
#          bucket: MINIO-BACKUP-BUCKET-NAME-HERE
#          region: us-east-1
#          credentialsSecret: my-cluster-name-backup-minio
#          endpointUrl: http://minio.psmdb.svc.cluster.local:9000/minio/
#          insecureSkipTLSVerify: false
#          prefix: ""

minio:
  enabled: true
  storageClass: longhorn

#生产环境、私有化：
# elasticsearch: 
#     enabled: true
#     kibana: true
# 其它环境 , 使用中央es
#   elasticsearch: 
#       enabled: false
#       kibana: false
elasticsearch:
  fullnameOverride: "elasticsearch"
  storageClass: ""
  enabled: false
  # 定制镜像,支持 ik 和 pinyin 
  image:
    registry: "ghcr.io"
    repository: "vikadata/bitnami/elasticsearch"
    tag: "8.12.2-debian-12-r0"
  service:
    type: ClusterIP
  master:
    heapSize: 512m
    persistence:
      size: 3Gi
  data:
    resources:
      requests:
        cpu: "200m"
        memory: 2048m
      # limits:
      #   memory: 8Gi
    heapSize: 2048m
    persistence:
      size: 10Gi
  security:
    enabled: true
    # PASSWORD must be the same value passed to elasticsearch to get an "out of the box" experience
    elasticPassword: "rRusKBH2Vq$xkTG!"
    tls:
      # use http rest
      restEncryption: false
      autoGenerated: true
      verificationMode: none
  coordinating:
    heapSize: 512m
  ingest:
    enabled: false
  # assumes global.kibanaEnabled=true
  kibana:
    storageClass: ""
    fullnameOverride: "kibana"
    persistence:
      size: 3Gi
    elasticsearch:
      security:
        enabled: true
        auth:
          enabled: true
          elasticsearchPasswordSecret: "elasticsearch"
           # default in the elasticsearch chart is elastic
          kibanaPassword: "bika.ai@com"
          createSystemUser: true
        tls:
          enabled: false
          existingSecret: "elasticsearch-master-crt"
          verificationMode: "none"

# dev 和 staging 使用公共openobserve
# 生产环境、私有化 启用安装
openobserve:
  enabled: false
  fullnameOverride: "openobserve"
  auth:
    ZO_ROOT_USER_EMAIL: "devops@bika.ai"
    ZO_ROOT_USER_PASSWORD: "bikabika"
    ZO_S3_ACCESS_KEY: "bika"
    ZO_S3_SECRET_KEY: "bikabika"
  config:
    ZO_META_STORE: "postgres"
    # 日志保留730天, 2年
    ZO_COMPACT_DATA_RETENTION_DAYS: 730
    ZO_S3_SERVER_URL: "http://minio:9000"
    ZO_S3_BUCKET_NAME: "openobserve"
    ZO_S3_REGION_NAME: "local"
    ZO_S3_PROVIDER: "minio"
    ZO_META_CONNECTION_POOL_MAX_SIZE: "3"
    ZO_META_CONNECTION_POOL_MIN_SIZE: "1"
  # 从pg secret 获取密码  
  extraEnv:
    - name: PG_PASSWORD
      valueFrom:
        secretKeyRef:
          name:  bika-pg-pguser-openobserve
          key: password
    - name: ZO_META_POSTGRES_DSN
      value: postgresql://openobserve:$(PG_PASSWORD)@bika-pg-pgbouncer:5432/openobserve
  postgres:
    enabled: false
    pgadmin:
      enabled: false
  nats:
    config:
      jetstream:
        fileStore:
          pvc:
            size: 10Gi
  querier:
    config:
      persistence:
        size: 20Gi

# 重复的服务，环境变量一致，仅仅容器名不同
# bika-server支持websocket+API, bika-web支持网页+API
servers:
  # -- web服务多少副本
  - name: bika-web
    port: 3000
    replicas: 2
    initContainer: true
    probe:
      path: /api/meta
      port: 3000
  # -- 独立node server多少个副本
  - name: bika-server
    port: 3333
    replicas: 1
    initContainer: false
    probe:
      path: /api/meta
      port: 3333
  # -- 协同文档hocuspocus服务器
  - name: bika-server-doc
    port: 3366
    replicas: 1
    initContainer: false
    probe:
      path: /
      port: 3366