{{- $envConfigMapSHA1 := include (print $.Template.BasePath "/bika-web-env.configmap.yaml") . | sha1sum -}}

{{- $imagePullSecrets :=  include "imagePullSecrets" . | indent 6 -}}

{{- range .Values.servers }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
  namespace: {{ $.Values.namespace }}
  labels: 
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: {{ .replicas }}
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
      annotations:
        configmap.bika-web-env/reload: {{ $envConfigMapSHA1 }}
    spec:
      {{- if .initContainer }}
      initContainers:
      - name: bika-init
        image: ghcr.io/vikadata/bika/bika-init:{{ $.Values.version }}
        env:
        {{- if $.Values.web.selfPostgres }}
        - name: PG_DATABASE_URL_IN_SECRET
          valueFrom:
            secretKeyRef:
              key: pgbouncer-uri
              name: bika-pg-pguser-bika
        - name: PG_DATABASE_URL
          value: $(PG_DATABASE_URL_IN_SECRET)?schema=public&connection_limit=9&pgbouncer=true
        
        {{- end }}
        {{- if $.Values.web.extraEnvs }}
        {{ toYaml $.Values.web.extraEnvs | nindent 8 }}
        {{- end }}

        envFrom:
        {{- if $.Values.web.extraEnvFrom }}
        {{- toYaml $.Values.web.extraEnvFrom | nindent 8 }}
        {{- end }}
        - configMapRef:
            name: bika-web-env
        resources:
          requests:
            cpu: {{ $.Values.web.cpu }}
      {{- end }}

      containers:
      - name: {{ .name }}
        image: ghcr.io/vikadata/bika/{{ .name }}:{{ $.Values.version }}
        env:
        {{- if $.Values.web.selfPostgres }}
        - name: PG_DATABASE_URL_IN_SECRET
          valueFrom:
            secretKeyRef:
              key: pgbouncer-uri
              name: bika-pg-pguser-bika
        - name: PG_DATABASE_URL
          value: $(PG_DATABASE_URL_IN_SECRET)?schema=public&connection_limit=9&pgbouncer=true
        
        {{- end }}


        {{- if $.Values.web.selfMongo }}
        - name: MONGODB_DATABASE_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: MONGODB_DATABASE_ADMIN_USER
              name: bika-mongo-name-secrets
        - name: MONGODB_DATABASE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MONGODB_DATABASE_ADMIN_PASSWORD
              name: bika-mongo-name-secrets
        {{- if $.Values.mongo.sharding.enabled }}
        - name: MONGODB_DATABASE_URL
          value: mongodb://$(MONGODB_DATABASE_ADMIN_USER):$(MONGODB_DATABASE_ADMIN_PASSWORD)@bika-mongo-mongos:27017/bika?authSource=admin
        {{- else }}
        # -- 从secrets里组合mongodb连接
        - name: MONGODB_DATABASE_URL
          value: mongodb://$(MONGODB_DATABASE_ADMIN_USER):$(MONGODB_DATABASE_ADMIN_PASSWORD)@bika-mongo-rs0:27017/bika?authSource=admin&replicaSet=rs0
        {{- end }}

        {{- end }}

        {{- if $.Values.openobserve.enabled }}
        - name: OPENOBSERVE_LOG_URL
          value: http://{{- default "devops@bika.ai" $.Values.openobserve.auth.ZO_ROOT_USER_EMAIL | urlquery -}}:{{ default "bikabika" .Values.openobserve.auth.ZO_ROOT_USER_PASSWORD }}@openobserve-router:5080/bika
        {{- end }}

        {{- if $.Values.web.extraEnvs }}
        {{ toYaml $.Values.web.extraEnvs | nindent 8 }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: bika-web-env
        {{- if $.Values.web.extraEnvFrom }}
        {{- toYaml $.Values.web.extraEnvFrom | nindent 8 }}
        {{- end }}
        resources:
          requests:
            cpu: {{ $.Values.web.cpu }}
        livenessProbe:
          httpGet:
            path: {{ .probe.path }}
            port: {{ .probe.port }}
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 45
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: {{ .probe.path }}
            port: {{ .probe.port }}
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 15
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: {{ .probe.path }}
            port: {{ .probe.port }}
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        imagePullPolicy: Always

      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      automountServiceAccountToken: true
      shareProcessNamespace: false
      securityContext: {}
      {{ $imagePullSecrets }}
      schedulerName: default-scheduler
      enableServiceLinks: true
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 100%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
 {{- end }}