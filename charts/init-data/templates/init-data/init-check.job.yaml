{{- if .Values.hooks.enabled -}}
{{- $redisHost := include "redis.host" . -}}
{{- $redisPort := include "redis.port" . -}}
{{- $mysqlHost := include "mysql.host" . -}}
{{- $mysqlPort := include "mysql.port" . -}}
{{- $minioHost := include "minio.host" . -}}
{{- $minioPort := include "minio.port" . -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.fullname }}-init-check
  labels:
    app: initCheck
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "-1"
spec:
  {{- if .Values.hooks.activeDeadlineSeconds }}
  activeDeadlineSeconds: {{ .Values.hooks.activeDeadlineSeconds }}
  {{- end}}
  template:
    metadata:
      name:  {{ .Values.fullname }}-init-check
      annotations:
  {{- if .Values.hooks.initCheck.podAnnotations }}
  {{ toYaml .Values.hooks.initCheck.podAnnotations | indent 8 }}
  {{- end }}
      labels:
        app: {{ .Values.fullname }}-init-check
        release: "{{ .Release.Name }}"
  {{- if .Values.hooks.initCheck.podLabels }}
  {{ toYaml .Values.hooks.initCheck.podLabels | indent 8 }}
  {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity:
      {{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
  {{- if .Values.container.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.container.nodeSelector "context" $) | nindent 8 }}
  {{- end }}
      restartPolicy: Never
  {{- if .Values.hooks.initCheck.image.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.hooks.initCheck.image.imagePullSecrets | indent 8 }}
  {{- end }}
  {{- if .Values.hooks.securityContext }}
      securityContext:
{{ toYaml .Values.hooks.securityContext | indent 8 }}
  {{- end }}
      containers:
      - name: db-check
        image: {{.Values.images.initCheck }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.hooks.initCheck.image.pullPolicy }}
        command:
          - /bin/sh
          - -c
          - |
            echo "Checking if REDIS is up"
            REDIS_STATUS=0
            while [ $REDIS_STATUS -eq 0 ]; do
              REDIS_STATUS=1
              {{- if .Values.redis.enabled }}
                REDIS_HOST={{ $redisHost }}
              {{- end }}
              if ! nc -z "$REDIS_HOST" {{ $redisPort }}; then
                  REDIS_STATUS=0
                  echo "$REDIS_HOST is not available yet"
              fi
              if [ "$REDIS_STATUS" -eq 0 ]; then
                echo "REDIS not ready. Sleeping for 10s before trying again"
                sleep 10;
              fi
            done
            echo "REDIS is up"

            echo "Checking if mysql is up"
            MYSQL_STATUS=0
            while [ $MYSQL_STATUS -eq 0 ]; do
                MYSQL_STATUS=1
               {{- if .Values.mysql.enabled }}
                  mysql_HOST={{ $mysqlHost }}
                  if ! nc -z "$mysql_HOST" {{ $mysqlPort }}; then
                    MYSQL_STATUS=0
                    echo "$mysql_HOST is not available yet"
                  fi
               {{- else -}}
                   MYSQL_STATUS=0
               {{- end }}
               if [ "$MYSQL_STATUS" -eq 0 ]; then
                   echo "mysql not ready. Sleeping for 10s before trying again"
                   sleep 10;
               fi
            done
            echo "mysql is up"

            echo "Checking if minio is up"
            MINIO_STATUS=0
            while [ $MINIO_STATUS -eq 0 ]; do
                MINIO_STATUS=1
               {{- if .Values.minio.enabled }}
                  minio_HOST={{ $minioHost }}
                  if ! nc -z "$minio_HOST" {{ $minioPort }}; then
                    MINIO_STATUS=0
                    echo "$minio_HOST is not available yet"
                  fi
               {{- else -}}
                   MYSQL_STATUS=0
               {{- end }}
               if [ "$MINIO_STATUS" -eq 0 ]; then
                   echo "minio not ready. Sleeping for 10s before trying again"
                   sleep 10;
               fi
            done
            echo "minio is up"

        env:
{{- if .Values.hooks.initCheck.env }}
{{ toYaml .Values.hooks.initCheck.env | indent 8 }}
{{- end }}
        resources:
{{ toYaml .Values.hooks.initCheck.resources | indent 10 }}
  {{- if .Values.hooks.shareProcessNamespace }}
     shareProcessNamespace: {{ .Values.hooks.shareProcessNamespace }}
    {{- end }}
{{- end }}
